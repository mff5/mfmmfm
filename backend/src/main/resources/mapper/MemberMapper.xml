<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.backend.member.MemberMapper">
    <resultMap id="memberResultMap" type="com.kh.backend.member.Member">
        <result property="no" column="no"/>
        <result property="id" column="id"/>
        <result property="pw" column="pw"/>
        <result property="name" column="name"/>
        <result property="phone" column="phone"/>
        <result property="email" column="email"/>
        <result property="birth" column="birth"/>
        <result property="gender" column="gender"/>
    </resultMap>
    <insert id="insertMember" parameterType="com.kh.backend.member.Member">
        INSERT INTO member (id, pw, name, phone, email, birth, gender)
        VALUES (    #{id, jdbcType=VARCHAR},  #{pw, jdbcType=VARCHAR},   #{name, jdbcType=VARCHAR},  #{phone, jdbcType=VARCHAR},  #{email, jdbcType=VARCHAR},
                    #{birth, jdbcType=DATE}, #{gender, jdbcType=VARCHAR})
    </insert>
    <select id="findById" parameterType="String" resultMap="memberResultMap">
        SELECT * FROM member WHERE id = #{id}
    </select>
    <select id="findByEmail" parameterType="String" resultMap="memberResultMap">
        SELECT * FROM member WHERE email = #{email}
    </select>
    <select id="findByPhone" parameterType="String" resultMap="memberResultMap">
        SELECT * FROM member WHERE phone = #{phone}
    </select>
    <select id="findByIdAndPhone" parameterType="map" resultMap="memberResultMap">
        SELECT * FROM member WHERE id = #{id} AND phone = #{phone}
    </select>
    <select id="findIdByPhone" parameterType="String" resultType="String">
        SELECT id FROM member WHERE trim(phone) = #{phone}
    </select>
    <update id="resetPw">
        update MEMBER set pw = #{pw} where id = #{id}
    </update>
    <select id="findByNo" parameterType="int" resultMap="memberResultMap">
select * from member where no = #{no}
    </select>
    <update id="updatePw">
        update member set pw =#{pw} where no = #{no}
    </update>
    <delete id="deleteMemberById">
        delete from MEMBER where id = #{id}
    </delete>
    <select id="getMemberCount" resultType="int">
        select count(*) from MEMBER
    </select>
    <select id="manCount" resultType="int">
        select count(*) from MEMBER where GENDER = 'M'
    </select>
    <select id="getMonthMemberCount" resultType="int">
        <![CDATA[
        SELECT COUNT(*)
        FROM member
        WHERE reg_date >= TRUNC(ADD_MONTHS(SYSDATE, -1))
          AND reg_date < TRUNC(SYSDATE)
        ]]>
    </select>
    <select id="getAgeGroupDistribution" resultType="java.util.Map">
        SELECT
            CASE
                WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, birth) / 12) BETWEEN 10 AND 19 THEN '10대'
                WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, birth) / 12) BETWEEN 20 AND 29 THEN '20대'
                WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, birth) / 12) BETWEEN 30 AND 39 THEN '30대'
                WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, birth) / 12) BETWEEN 40 AND 49 THEN '40대'
                WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, birth) / 12) BETWEEN 50 AND 59 THEN '50대'
                ELSE '60대 이상'
                END AS ageGroup,
            COUNT(*) AS memberCount
        FROM member
        GROUP BY CASE
                     WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, birth) / 12) BETWEEN 10 AND 19 THEN '10대'
                     WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, birth) / 12) BETWEEN 20 AND 29 THEN '20대'
                     WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, birth) / 12) BETWEEN 30 AND 39 THEN '30대'
                     WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, birth) / 12) BETWEEN 40 AND 49 THEN '40대'
                     WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, birth) / 12) BETWEEN 50 AND 59 THEN '50대'
                     ELSE '60대 이상'
                     END
    </select>
</mapper>
